{
	"for": {
		"prefix": "for",
		"body": [
			"for (${1:size_t} ${2:i} = ${3:0}; ${2:i} < ${4:length}; ++${2:i})",
			"{",
			"\t${5}",
			"}$0"
		],
		"description": "Code snippet for 'for' loop"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (int ${1:i} = ${2:length} - 1; ${1:i} >= ${3:0}; ${1:i}--)",
			"{",
			"\t$4",
			"}$0"
		],
		"description": "Code snippet for reverse 'for' loop"
	},
	"do": {
		"prefix": "do",
		"body": [
			"do",
			"{",
			"\t$1",
			"} while($2);"
		],
		"description": "Code snippet for do...while loop"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for while loop"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"for(${1|auto,auto&,auto const&|} ${2:var} : ${3:collection})",
			"{",
			"\t$4",
			"}"
		],
		"description": "Code snippet for range-based for loop (c++11) statement"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else",
			"{",
			"\t$1",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "else if",
		"body": [
			"else if ($1)",
			"{",
			"\t$2",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${1:MyEnum}",
			"{",
			"\t$2",
			"};"
		],
		"description": "Code snippet for enum"
	},
	"enum class": {
		"prefix": "enum class",
		"body": [
			"enum class ${1:MyClass}",
			"{",
			"\t$2",
			"};"
		],
		"description": "Code snippet for enum class (c++11)"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"\t${MyClass}();",
			"\t${MyClass}(${MyClass} &&) = default;",
			"\t${MyClass}(const ${MyClass} &) = default;",
			"\t${MyClass} &operator=(${MyClass} &&) = default;",
			"\t${MyClass} &operator=(const ${MyClass} &) = default;",
			"\t~${MyClass}();",
			"",
			"private:",
			"\t$1",
			"};",
			"",
			"${MyClass}::${MyClass}()",
			"{",
			"}",
			"",
			"${MyClass}::~${MyClass}()",
			"{",
			"}"
		],
		"description": "Code snippet for class"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"\t${MyClass}() = default;",
			"\t${MyClass}(${MyClass} &&) = default;",
			"\t${MyClass}(const ${MyClass} &) = default;",
			"\t${MyClass} &operator=(${MyClass} &&) = default;",
			"\t${MyClass} &operator=(const ${MyClass} &) = default;",
			"\t~${MyClass}() = default;",
			"",
			"private:",
			"\t$1",
			"};"
		],
		"description": "Code snippet for class with inline constructor/destructor"
	},
	"interface": {
		"prefix": "interface",
		"body": [
			"__interface I${Interface}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for interface (Visual C++)"
	},
	"namespace": {
		"prefix": "namespace",
		"body": [
			"namespace ${MyNamespace}",
			"{",
			"\t$1",
			"}"
		],
		"description": "Code snippet for namespace"
	},
	"#ifdef": {
		"prefix": "#ifdef",
		"body": [
			"#ifdef ${DEBUG}",
			"$1",
			"#endif // ${DEBUG}"
		],
		"description": "Code snippet for #ifdef"
	},
	"#ifndef": {
		"prefix": "#ifndef",
		"body": [
			"#ifndef ${1:1}",
			"$2",
			"#endif // !$1"
		],
		"description": "Code snippet for #ifndef"
	},
	"#if": {
		"prefix": "#if",
		"body": [
			"#ifdef ${1:0}",
			"$2",
			"#endif // $1"
		],
		"description": "Code snippet for #if"
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${MyStruct}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for struct"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch (${switch_on})",
			"{",
			"default:",
			"\tbreak;$1",
			"}"
		],
		"description": "Code snippet for switch statement"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"{",
			"\t",
			"}",
			"catch (std::exception const& e)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Code snippet for try catch"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${MyUnion}",
			"{",
			"\t$1",
			"};"
		],
		"description": "Code snippet for union"
	},
	"cout": {
		"prefix": "cout",
		"body": [
			"std::cout << ${1:/* message */} << '\\n';"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"#inc": {
		"prefix": "#inc",
		"body": [
			"#include \"$1\""
		],
		"description": "Code snippet for #include \" \""
	},
	"#inc<": {
		"prefix": "#inc<",
		"body": [
			"#include <$1>"
		],
		"description": "Code snippet for #include \" \""
	},
	"#def": {
		"prefix": "#def",
		"body": [
			"#define $1 $2"
		],
		"description": "Code snippet for #define"
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, const char** argv)",
			"{",
			"$0",
			"}"
		],
		"description": "Code snippet for main function"
	},
	"static_cast": {
		"prefix": "static_cast",
		"body": "static_cast<${1:Type}>(${2:expression})$0",
		"description": "Code snippet for static_cast"
	},
	"dynamic_cast": {
		"prefix": "dynamic_cast",
		"body": "dynamic_cast<${1:Type}>(${2:expression})$0",
		"description": "Code snippet for dynamic_cast"
	},
	"reinterpret_cast": {
		"prefix": "reinterpret_cast",
		"body": "reinterpret_cast<${1:Type}>(${2:expression})$0",
		"description": "Code snippet for reinterpret_cast"
	},
	"const_cast": {
		"prefix": "const_cast",
		"body": "const_cast<${1:Type}>(${2:expression})$0",
		"description": "Code snippet for const_cast"
	},
	"new": {
		"prefix": "new",
		"body": "new ${1:Type}${2:[${3:count}]}${4:(${5:initializer})};$0",
		"description": "Code snippet for new operator"
	},
	"placement-new": {
		"prefix": "placement new",
		"body": "new(${1:place}) ${2:Type}${3:(${4:initializer})};$0",
		"description": "Code snippet for placement new operator"
	},
	"delete": {
		"prefix": "delete",
		"body": "delete${1:[]} ${2:expression};$0",
		"description": "Code snippet for delete operator"
	}
}
